	//liquid Argon
G4cout << G4endl << "WARNING: changes made to geometry in order to test neutron showering in LAr shielding." << G4endl << G4endl;
/* Polycone implementation; deprecated
	G4double liquidArgon_Z[6] = {3.95*m,1.00001*m,1*m,-1*m,-1.00001*m,-3.95*m};
	G4double liquidArgon_RMin[6] = {0*m,0*m,1.00001*m,1.00001*m,0*m,0*m};
	G4double liquidArgon_RMax[6] = {3.95*m,3.95*m,3.95*m,3.95*m,3.95*m,3.95*m};

	G4Polycone* solid_liquidArgon = new G4Polycone("sol_liquidArgon", 0, 2*M_PI,6,liquidArgon_Z,liquidArgon_RMin,liquidArgon_RMax);
	G4LogicalVolume* logical_liquidArgon = new G4LogicalVolume(solid_liquidArgon, mat_ArLiq, "log_liquidArgon" );
	logical_liquidArgon->SetVisAttributes ( new G4VisAttributes(G4Colour(0.8, 0.0, 0.8,0.1) ));
	G4VPhysicalVolume* physical_liquidArgon =
		new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset),logical_liquidArgon,"phy_liquidArgon",logical_World,false,0,checkOverlaps);
*/

//For explanation of this implementation see
//innerVessel in DetectorConstruction.cc
//cylinder
//~G4Tubs* solid_liquidArgon_1 = new G4Tubs("sol_liquidArgon_1",1*m,3.95*m,3.95*m,0,2*M_PI);
G4Tubs* solid_liquidArgon_1 = new G4Tubs("sol_liquidArgon_1",1*m,1.5*m,1.5*m,0,2*M_PI);
G4LogicalVolume* logical_liquidArgon_1 = new G4LogicalVolume(solid_liquidArgon_1, mat_ArLiq, "log_liquidArgon_1" );	
logical_liquidArgon_1->SetVisAttributes ( new G4VisAttributes(G4Colour(0.8, 0.0, 0.8,0.1) ));
	G4VPhysicalVolume* physical_liquidArgon_1 =
	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset),logical_liquidArgon_1,"phy_liquidArgon_1",logical_World,false,0,checkOverlaps);

//disks
//~G4Tubs* solid_liquidArgon_2 = new G4Tubs("sol_liquidArgon_2",0*m,.999999*m,1.475*m,0,2*M_PI);
G4Tubs* solid_liquidArgon_2 = new G4Tubs("sol_liquidArgon_2",0*m,.999999*m,0.225*m,0,2*M_PI);
G4LogicalVolume* logical_liquidArgon_2 = new G4LogicalVolume(solid_liquidArgon_2, mat_ArLiq, "log_liquidArgon_2" );	
logical_liquidArgon_2->SetVisAttributes ( new G4VisAttributes(G4Colour(0.8, 0.0, 0.8,0.1) ));
	G4VPhysicalVolume* physical_liquidArgon_2 =
//~	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset+2.475*m),logical_liquidArgon_2,"phy_liquidArgon_2",logical_World,false,0,checkOverlaps);
	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset+1.225*m),logical_liquidArgon_2,"phy_liquidArgon_2",logical_World,false,0,checkOverlaps);
	G4VPhysicalVolume* physical_liquidArgon_3 =
	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset-1.225*m),logical_liquidArgon_2,"phy_liquidArgon_3",logical_World,false,0,checkOverlaps);
	//~  	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset-2.475*m),logical_liquidArgon_2,"phy_liquidArgon_3",logical_World,false,0,checkOverlaps);

  materialmass=(logical_liquidArgon_1->GetMass()+logical_liquidArgon_2->GetMass()+logical_liquidArgon_2->GetMass()+logical_FillGas->GetMass())/CLHEP::kg;


	//outer Vessel
/*Polycone implementation - deprecated.
	G4double outerVessel_Z[6] = {4*m,3.95001*m,3.95*m,-3.95*m,-3.95001*m,-4*m};
	G4double outerVessel_RMin[6] = {0*m,0*m,3.95*m,3.95*m,0*m,0*m};
	G4double outerVessel_RMax[6] = {4*m,4*m,4*m,4*m,4*m,4*m};

	G4Polycone* solid_outerVessel = new G4Polycone("sol_outerVessel", 0, 2*M_PI,6,outerVessel_Z,outerVessel_RMin,outerVessel_RMax);
	G4LogicalVolume* logical_outerVessel = new G4LogicalVolume(solid_outerVessel, mat_Cu, "log_outerVessel" );
	logical_outerVessel->SetVisAttributes ( new G4VisAttributes(G4Colour(0.62, 0.3, 0.2,0.7) ));
	G4VPhysicalVolume* physical_outerVessel =
		new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset),logical_outerVessel,"phy_outerVessel",logical_World,false,0,checkOverlaps);
*/

//~G4Tubs* solid_outerVessel_1 = new G4Tubs("sol_outerVessel_1",3.950001*m,3.999999*m,3.999999*m,0,2*M_PI);
G4Tubs* solid_outerVessel_1 = new G4Tubs("sol_outerVessel_1",1.450001*m,1.499999*m,1.499999*m,0,2*M_PI);
G4LogicalVolume* logical_outerVessel_1 = new G4LogicalVolume(solid_outerVessel_1, mat_Cu, "log_outerVessel_1" );	
logical_outerVessel_1->SetVisAttributes ( new G4VisAttributes(G4Colour(0.62, 0.3, 0.2,0.7) ));
	G4VPhysicalVolume* physical_outerVessel_1 =
	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset),logical_outerVessel_1,"phy_outerVessel_1",logical_World,false,0,checkOverlaps);

//disks
G4Tubs* solid_outerVessel_2 = new G4Tubs("sol_outerVessel_2",0*m,1.45*m,0.02499995*m,0,2*M_PI);
//~G4Tubs* solid_outerVessel_2 = new G4Tubs("sol_outerVessel_2",0*m,4*m,0.02499995*m,0,2*M_PI);
G4LogicalVolume* logical_outerVessel_2 = new G4LogicalVolume(solid_outerVessel_2, mat_Cu, "log_outerVessel_2" );	
logical_outerVessel_2->SetVisAttributes ( new G4VisAttributes(G4Colour(0.62, 0.3, 0.2,0.7) ));
	G4VPhysicalVolume* physical_outerVessel_2 =
	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset+1.475*m),logical_outerVessel_2,"phy_outerVessel_2",logical_World,false,0,checkOverlaps);
	//~  	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset+3.975*m),logical_outerVessel_2,"phy_outerVessel_2",logical_World,false,0,checkOverlaps);
	G4VPhysicalVolume* physical_outerVessel_3 =
	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset-1.475*m),logical_outerVessel_2,"phy_outerVessel_3",logical_World,false,0,checkOverlaps);
	  //~new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset-3.975*m),logical_outerVessel_2,"phy_outerVessel_2",logical_World,false,0,checkOverlaps);



  //waterShield
/*Polycone implementation - deprecated
	G4double waterShield_Z[6] = {6.5*m,4.00001*m,4*m,-4*m,-4.00001*m,-6.5*m};
	G4double waterShield_RMin[6] = {0*m,0*m,4.00001*m,4.00001*m,0*m,0*m};
	G4double waterShield_RMax[6] = {6.5*m,6.5*m,6.5*m,6.5*m,6.5*m,6.5*m};

	G4Polycone* solid_waterShield = new G4Polycone("sol_waterShield", 0, 2*M_PI,6,waterShield_Z,waterShield_RMin,waterShield_RMax);
	G4LogicalVolume* logical_waterShield = new G4LogicalVolume(solid_waterShield, mat_Water, "log_waterShield" );
	logical_waterShield->SetVisAttributes ( new G4VisAttributes(G4Colour(0.3, 0.6, 1.0,0.2) ));
	G4VPhysicalVolume* physical_waterShield =
		new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset),logical_waterShield,"phy_waterShield",logical_World,false,0,checkOverlaps);
*/

//~G4Tubs* solid_waterShield_1 = new G4Tubs("sol_waterShield_1",4*m,6.499999*m,6.499999*m,0,2*M_PI);
G4Tubs* solid_waterShield_1 = new G4Tubs("sol_waterShield_1",1.5*m,6.499999*m,6.499999*m,0,2*M_PI);
G4LogicalVolume* logical_waterShield_1 = new G4LogicalVolume(solid_waterShield_1, mat_Water, "log_waterShield_1" );	
logical_waterShield_1->SetVisAttributes ( new G4VisAttributes(G4Colour(0.3, 0.6, 1.0,0.2) ));
	G4VPhysicalVolume* physical_waterShield_1 =
	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset),logical_waterShield_1,"phy_waterShield_1",logical_World,false,0,checkOverlaps);

//disks
//~G4Tubs* solid_waterShield_2 = new G4Tubs("sol_waterShield_2",0*m,3.999999*m,1.25*m,0,2*M_PI);
G4Tubs* solid_waterShield_2 = new G4Tubs("sol_waterShield_2",0*m,1.499999*m,2.5*m,0,2*M_PI);
G4LogicalVolume* logical_waterShield_2 = new G4LogicalVolume(solid_waterShield_2, mat_Water, "log_waterShield_2" );	
logical_waterShield_2->SetVisAttributes ( new G4VisAttributes(G4Colour(0.3, 0.6, 1.0,0.2) ));
	G4VPhysicalVolume* physical_waterShield_2 =
	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset+4*m),logical_waterShield_2,"phy_waterShield_2",logical_World,false,0,checkOverlaps);
//~	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset+5.25*m),logical_waterShield_2,"phy_waterShield_2",logical_World,false,0,checkOverlaps);
	G4VPhysicalVolume* physical_waterShield_3 =
	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset-4*m),logical_waterShield_2,"phy_waterShield_3",logical_World,false,0,checkOverlaps);
//~	  new G4PVPlacement(0,G4ThreeVector(0,0,0+assemblyzoffset-5.25*m),logical_waterShield_2,"phy_waterShield_2",logical_World,false,0,checkOverlaps);

//Define regions for custom range cuts in macro
	 
	G4Region *WaterRegion_1 = new G4Region("WaterRegion_1");
	WaterRegion_1-> AddRootLogicalVolume(logical_waterShield_1);
	G4Region *WaterRegion_2 = new G4Region("WaterRegion_2");
	WaterRegion_2-> AddRootLogicalVolume(logical_waterShield_2);
	G4Region *LArRegion_1 = new G4Region("LArRegion_1");
	LArRegion_1-> AddRootLogicalVolume(logical_liquidArgon_1);
	G4Region *LArRegion_2 = new G4Region("LArRegion_2");
	LArRegion_2-> AddRootLogicalVolume(logical_liquidArgon_2);
