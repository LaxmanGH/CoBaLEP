	////////////////////////////////////////////////////////////////////////////////////////
	// Get nist material manager
  G4NistManager* nist = G4NistManager::Instance();
  // Option to switch on/off checking of volumes overlaps
  
G4Material* mat_vacuum = nist->FindOrBuildMaterial("G4_Galactic");
G4Material* mat_air = nist->FindOrBuildMaterial("G4_AIR");
G4Material* mat_GeNat = nist->FindOrBuildMaterial("G4_Ge");
G4Material* mat_Cu = nist->FindOrBuildMaterial("G4_Cu");
G4Material* mat_Pb = nist->FindOrBuildMaterial("G4_Pb");
G4Material* mat_N = nist->FindOrBuildMaterial("G4_N");
G4Material* mat_Ar = nist->FindOrBuildMaterial("G4_Ar");
G4Material* mat_Water = nist->FindOrBuildMaterial("G4_WATER");
G4Material* mat_Silicon = nist->FindOrBuildMaterial("G4_Si");
G4Material* mat_Oxygen = nist->FindOrBuildMaterial("G4_O");
G4Material* mat_Uranium = nist->FindOrBuildMaterial("G4_U");
G4Material* mat_Thorium = nist->FindOrBuildMaterial("G4_Th");
G4Material* mat_Potassium = nist->FindOrBuildMaterial("G4_K");
G4Material* mat_C = nist->FindOrBuildMaterial("G4_C");
G4Material* mat_Mn = nist->FindOrBuildMaterial("G4_Mn");
G4Material* mat_Cr = nist->FindOrBuildMaterial("G4_Cr");
G4Material* mat_Ni = nist->FindOrBuildMaterial("G4_Ni");
G4Material* mat_Mo = nist->FindOrBuildMaterial("G4_Mo");
G4Material* mat_Ti = nist->FindOrBuildMaterial("G4_Ti");
G4Material* mat_P = nist->FindOrBuildMaterial("G4_P");
G4Material* mat_S = nist->FindOrBuildMaterial("G4_S");
G4Material* mat_Fe = nist->FindOrBuildMaterial("G4_Fe");
G4Material* mat_H = nist->FindOrBuildMaterial("G4_H");
G4Material* mat_Gd = nist->FindOrBuildMaterial("G4_Gd");
G4Material* mat_B = nist->FindOrBuildMaterial("G4_B");

G4Material* mat_316Ti= new G4Material("StainlessSteel", 7.99 * g / cm3, 11);
mat_316Ti->AddMaterial(mat_C,0.0004);
mat_316Ti->AddMaterial(mat_Mn,0.01);
mat_316Ti->AddMaterial(mat_Silicon,0.005);
mat_316Ti->AddMaterial(mat_Cr,0.17);
mat_316Ti->AddMaterial(mat_Ni,0.12);
mat_316Ti->AddMaterial(mat_Mo,0.025);
mat_316Ti->AddMaterial(mat_Ti,0.0013);
mat_316Ti->AddMaterial(mat_P,0.0002);
mat_316Ti->AddMaterial(mat_S,0.00015);
mat_316Ti->AddMaterial(mat_Cu,0.000375);
mat_316Ti->AddMaterial(mat_Fe,0.667575);

//PE and Gd2O3 upon Bernhard's request
G4Material* mat_poly = new G4Material("Polyethylene", 0.92 * g / cm3, 2);
mat_poly->AddMaterial(mat_C,0.856);
mat_poly->AddMaterial(mat_H,0.144);

G4Material* mat_boratedpoly = new G4Material("BoratedPolyethylene", 1.025 * g / cm3, 3);
mat_boratedpoly->AddMaterial(mat_C,0.813);
mat_boratedpoly->AddMaterial(mat_H,0.137);
mat_boratedpoly->AddMaterial(mat_B,0.050);

G4Material* mat_Gd2O3 = new G4Material("GadoliniumOxide", 7.4 * g / cm3, 2);
mat_Gd2O3->AddMaterial(mat_Gd,0.868);
mat_Gd2O3->AddMaterial(mat_Oxygen,0.132);

G4Material* mat_Rock= new G4Material("Rock", 2.86 * g / cm3, 2);
G4double sum_minors = 0.22/1000000. + 0.33/1000000. + 0.96/100.;

mat_Rock->AddMaterial(mat_Silicon, 0.467);
mat_Rock->AddMaterial(mat_Oxygen, 0.533);
//Uncomment these to add radioactive impurities back in
//mat_Rock->AddMaterial(mat_Silicon, 0.467*(1-sum_minors));
//mat_Rock->AddMaterial(mat_Oxygen, 0.533*(1-sum_minors));
//mat_Rock->AddMaterial(mat_Uranium, 0.22/1000000.);
//mat_Rock->AddMaterial(mat_Thorium, 0.33/1000000.);
//mat_Rock->AddMaterial(mat_Potassium, 0.96/100.);


  G4Isotope* iso_Ge70 = new G4Isotope("Germanium70", 32, 70, 69.9243 * g / mole);
  G4Isotope* iso_Ge72 = new G4Isotope("Germanium72", 32, 72, 71.9221 * g / mole);
  G4Isotope* iso_Ge73 = new G4Isotope("Germanium73", 32, 73, 72.9235 * g / mole);
  G4Isotope* iso_Ge74 = new G4Isotope("Germanium74", 32, 74, 73.9212 * g / mole);
  G4Isotope* iso_Ge76 = new G4Isotope("Germanium76", 32, 76, 75.9214 * g / mole);

  G4Element* ele_Ge = new G4Element("Germanium", "Ge", 2);
  ele_Ge->AddIsotope(iso_Ge74, 0.117);
	ele_Ge->AddIsotope(iso_Ge76, 0.883);

  G4Material* mat_GeEnr = new G4Material("GermaniumEnriched", 5.323*g/cm3, 1);
  mat_GeEnr->AddElement(ele_Ge, 1);




	G4Material* mat_NCold = new G4Material("NitrogenCold",0.001251*293/80.*g/cm3, 1, kStateGas, 80.0*kelvin, 1.0*bar);
	mat_NCold->AddMaterial(mat_N,1);
	G4Material* mat_NLiq = new G4Material("NitrogenLiquid", 0.808*g/cm3, 1, kStateLiquid, 80.0*kelvin, 1.0*bar);
	mat_NLiq->AddMaterial(mat_N,1);

	G4Material* mat_ArCold = new G4Material("ArgonCold",0.001784*293/87.*g/cm3, 1, kStateGas, 87.0*kelvin, 1.0*bar);
	mat_ArCold->AddMaterial(mat_Ar,1);
	G4Material* mat_ArLiq = new G4Material("ArgonLiquid", 1.3954*g/cm3, 1, kStateLiquid, 87.0*kelvin, 1.0*bar);
	mat_ArLiq->AddMaterial(mat_Ar,1);



	////////////////////////////////////////////////////////////////////////////////////////
	G4Material* mat_Detector = mat_GeEnr;
	G4Material* mat_FillGas;

	//Vacuum ArgonLiquid ArgonGas NitrogenLiquid NitrogenGas
	if (innerVessel_FillMaterial.contains("NitrogenGas")) mat_FillGas	= mat_NCold;
	else if (innerVessel_FillMaterial.contains("NitrogenLiquid")) mat_FillGas	= mat_NLiq;
	else if (innerVessel_FillMaterial.contains("ArgonGas")) mat_FillGas	= mat_ArCold;
	else if (innerVessel_FillMaterial.contains("ArgonLiquid")) mat_FillGas	= mat_ArLiq;
	else mat_FillGas = mat_vacuum;


	G4cout << "----------------------------" << G4endl;
	G4cout << "Material in inner vessel is " << mat_FillGas->GetName() << G4endl;
	G4cout << "Temperature: "                << mat_FillGas->GetTemperature() << G4endl;
	G4cout << "State: "                      << mat_FillGas->GetState() << G4endl;
	G4cout << "Density: "                    << mat_FillGas->GetDensity() / (g/cm3) << " g/cm3 " << G4endl;
	G4cout << "----------------------------" << G4endl;
